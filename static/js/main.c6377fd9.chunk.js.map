{"version":3,"sources":["data.js","util/roll.js","components/header.jsx","components/dice.jsx","components/display.jsx","App.js","serviceWorker.js","index.js"],"names":["data","id","title","summary","fetchSitDown","roll","Math","floor","random","Header","props","className","handleClick","window","location","reload","Dice","onClick","diceRoll","src","Display","sitDown","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAAaA,G,UAAO,CAClB,CAAEC,GAAI,EAAGC,MAAO,mEAAsCC,QAAS,sLAC/D,CAAEF,GAAI,EAAGC,MAAO,0BAAiBC,QAAS,uEAC1C,CAAEF,GAAI,EAAGC,MAAO,4DAA+BC,QAAS,+DACxD,CAAEF,GAAI,EAAGC,MAAO,yCAAsBC,QAAS,mDAC/C,CAAEF,GAAI,EAAGC,MAAO,0DAA8BC,QAAS,mDACvD,CAAEF,GAAI,EAAGC,MAAO,2CAAwBC,QAAS,2KACjD,CAAEF,GAAI,EAAGC,MAAO,yCAAsBC,QAAS,mBAC/C,CAAEF,GAAI,EAAGC,MAAO,iDAA8BC,QAAS,oCACvD,CAAEF,GAAI,EAAGC,MAAO,iDAAoBC,QAAS,2BAC7C,CAAEF,GAAI,EAAGC,MAAO,gEAAmCC,QAAS,4ECCjDC,EAAe,WAC1B,OAAOJ,EAVI,WACX,IAAMK,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B,OAAY,IAATH,EACM,GAEAA,EAKGA,GAAS,I,MCThB,SAASI,EAAQC,GACtB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,eAAf,kCACA,yBAAKA,UAAU,kBAAf,WAAwC,yD,UCFxCC,EAAc,WAClBC,OAAOC,SAASC,UAGX,SAASC,EAAKN,GACnB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,cAAcM,QAASL,GAAcF,EAAMQ,UAC1D,0BAAMhB,MAAM,oBACV,yBAAKiB,IAAI,+EAA+ER,UAAU,aAAYM,QAASL,M,MCXxH,SAASQ,EAAQV,GAAQ,IACtBW,EAAYX,EAAZW,QACR,OACE,yBAAKV,UAAU,mBACb,uBAAGA,UAAU,mBAAb,yBACA,yBAAKA,UAAU,iBAAf,UAAmCU,EAAQnB,QAC3C,uBAAGS,UAAU,mBAAb,UAAmCU,EAAQlB,WCclCmB,MAdf,WACE,IAAMD,EAAUjB,IAEVc,EAAWG,EAAQpB,GAEzB,OACE,yBAAKU,UAAU,OACb,kBAACF,EAAD,MACA,kBAACO,EAAD,CAAME,SAAUA,IAChB,kBAACE,EAAD,CAASC,QAASA,MCNJE,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6377fd9.chunk.js","sourcesContent":["export const data = [\n  { id: 1, title: 'Rock Paper Scissors Battle! üóøüì∞‚úÇÔ∏è', summary: '3... 2... 1... Shoot! Which ever sign was thrown by the most people wins. Winners stay on, Losers sign off. When there are two players, regular Rock, Paper, Scissors rules apply!'},\n  { id: 2, title: 'Drum Roll! ü•Å', summary: 'We play ourselves out with a dynamic drum roll on a nearby surface!'},\n  { id: 3, title: 'Headbutt the Screen! üë®‚û°Ô∏èüíª', summary: 'All participants headbutt their webcams before signing off!'},\n  { id: 4, title: 'Deep Breath...üòëüí®', summary: 'Some deep breathing to start the day off right!'},\n  { id: 5, title: 'Big Ol\\' Thumbs Up! üëçüëçüëç', summary: '3... 2... 1... Two big thumbs up from everyone!'},\n  { id: 6, title: 'Odds and Evens! ‚òùÔ∏è‚úåÔ∏è', summary: 'Everyone calls Odds or Evens then 3... 2... 1... Shoot! Team members who called the correct outcome remain, while the rest sign off until only one team member is left!'},\n  { id: 7, title: 'Slow Snaps... üí•üëå', summary: 'Make it Snappy!'},\n  { id: 8, title: 'An Awkward Goodbye... üëãüò¨', summary: 'Well... uh... Goodbye I guess...'},\n  { id: 9, title: 'Applause! üëèüëèüëè', summary: 'Give yourselves a hand!'},\n  { id: 0, title: 'Shoutouts for Everyone! üì£üò±üëç:', summary: 'Shoutout your teammates for the cool stuff they did for you this week!'},\n]","import { data } from '../data'\n\nconst roll = () => {\n  const roll = Math.floor(Math.random() * 10)\n  if(roll === 0) {\n    return 10\n  } else {\n    return roll\n  }\n}\n\nexport const fetchSitDown = () => {\n  return data[roll() - 1]\n}\n","import React from 'react'\nimport './header.css'\n\nexport function Header (props) {\n  return(\n    <div className=\"header-wrapper\">\n      <div className='header-text'>Another COCO stand-up is over!</div>\n      <div className=\"header-subtext\">Time to <strong>SitDown‚Ñ¢Ô∏è</strong></div>\n    </div>\n  )\n}","import React from 'react'\n\nimport './dice.css'\n// import { refresh } from './util/refresh.js'\n\nconst handleClick = () => {\n  window.location.reload()\n}\n\nexport function Dice(props) {\n  return(\n    <div className='dice-wrapper'>\n      <div className=\"dice-number\" onClick={handleClick}>{props.diceRoll}</div>\n      <span title=\"Click to re-roll\">\n        <img src=\"https://i.pinimg.com/originals/f2/2a/65/f22a65580dad3290bf6bd64ba409e730.jpg\" className='dice-image'onClick={handleClick}/>\n      </span>\n    </div>\n  )\n}","import React from 'react'\nimport './display.css'\n\nexport function Display(props) {\n  const { sitDown } = props\n  return (\n    <div className='display-wrapper'>\n      <p className='display-preface'>Today's SitDown is...</p>\n      <div className='display-title'>{`${sitDown.title}`}</div>\n      <p className='display-summary'>{`${sitDown.summary}`}</p>\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\n\nimport { fetchSitDown } from './util/roll.js'\nimport { Header } from './components/header.jsx'\nimport { Dice } from './components/dice.jsx'\nimport { Display } from './components/display.jsx'\n\n\nfunction App() {\n  const sitDown = fetchSitDown()\n  // const sitDown = {id: 3, title: \"HeadButt the Screen\", summary: \"do the thing\"}\n  const diceRoll = sitDown.id\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Dice diceRoll={diceRoll}></Dice>\n      <Display sitDown={sitDown}></Display>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}